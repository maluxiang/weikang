// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: points.proto

package points

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Points_CreatePoints_FullMethodName             = "/points.Points/CreatePoints"
	Points_GetUserAllPoints_FullMethodName         = "/points.Points/GetUserAllPoints"
	Points_UpdatePoints_FullMethodName             = "/points.Points/UpdatePoints"
	Points_UpdatePointsCompensation_FullMethodName = "/points.Points/UpdatePointsCompensation"
	Points_DeletePoints_FullMethodName             = "/points.Points/DeletePoints"
)

// PointsClient is the client API for Points service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointsClient interface {
	CreatePoints(ctx context.Context, in *CreatePointsRequest, opts ...grpc.CallOption) (*CreatePointsResponse, error)
	GetUserAllPoints(ctx context.Context, in *GetUserAllPointsRequest, opts ...grpc.CallOption) (*GetUserAllPointsResponse, error)
	UpdatePoints(ctx context.Context, in *UpdatePointsRequest, opts ...grpc.CallOption) (*UpdatePointsResponse, error)
	UpdatePointsCompensation(ctx context.Context, in *UpdatePointsCompensationRequest, opts ...grpc.CallOption) (*UpdatePointsCompensationResponse, error)
	DeletePoints(ctx context.Context, in *DeletePointsRequest, opts ...grpc.CallOption) (*DeletePointsResponse, error)
}

type pointsClient struct {
	cc grpc.ClientConnInterface
}

func NewPointsClient(cc grpc.ClientConnInterface) PointsClient {
	return &pointsClient{cc}
}

func (c *pointsClient) CreatePoints(ctx context.Context, in *CreatePointsRequest, opts ...grpc.CallOption) (*CreatePointsResponse, error) {
	out := new(CreatePointsResponse)
	err := c.cc.Invoke(ctx, Points_CreatePoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) GetUserAllPoints(ctx context.Context, in *GetUserAllPointsRequest, opts ...grpc.CallOption) (*GetUserAllPointsResponse, error) {
	out := new(GetUserAllPointsResponse)
	err := c.cc.Invoke(ctx, Points_GetUserAllPoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) UpdatePoints(ctx context.Context, in *UpdatePointsRequest, opts ...grpc.CallOption) (*UpdatePointsResponse, error) {
	out := new(UpdatePointsResponse)
	err := c.cc.Invoke(ctx, Points_UpdatePoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) UpdatePointsCompensation(ctx context.Context, in *UpdatePointsCompensationRequest, opts ...grpc.CallOption) (*UpdatePointsCompensationResponse, error) {
	out := new(UpdatePointsCompensationResponse)
	err := c.cc.Invoke(ctx, Points_UpdatePointsCompensation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) DeletePoints(ctx context.Context, in *DeletePointsRequest, opts ...grpc.CallOption) (*DeletePointsResponse, error) {
	out := new(DeletePointsResponse)
	err := c.cc.Invoke(ctx, Points_DeletePoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointsServer is the server API for Points service.
// All implementations must embed UnimplementedPointsServer
// for forward compatibility
type PointsServer interface {
	CreatePoints(context.Context, *CreatePointsRequest) (*CreatePointsResponse, error)
	GetUserAllPoints(context.Context, *GetUserAllPointsRequest) (*GetUserAllPointsResponse, error)
	UpdatePoints(context.Context, *UpdatePointsRequest) (*UpdatePointsResponse, error)
	UpdatePointsCompensation(context.Context, *UpdatePointsCompensationRequest) (*UpdatePointsCompensationResponse, error)
	DeletePoints(context.Context, *DeletePointsRequest) (*DeletePointsResponse, error)
	mustEmbedUnimplementedPointsServer()
}

// UnimplementedPointsServer must be embedded to have forward compatible implementations.
type UnimplementedPointsServer struct {
}

func (UnimplementedPointsServer) CreatePoints(context.Context, *CreatePointsRequest) (*CreatePointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoints not implemented")
}
func (UnimplementedPointsServer) GetUserAllPoints(context.Context, *GetUserAllPointsRequest) (*GetUserAllPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAllPoints not implemented")
}
func (UnimplementedPointsServer) UpdatePoints(context.Context, *UpdatePointsRequest) (*UpdatePointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePoints not implemented")
}
func (UnimplementedPointsServer) UpdatePointsCompensation(context.Context, *UpdatePointsCompensationRequest) (*UpdatePointsCompensationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePointsCompensation not implemented")
}
func (UnimplementedPointsServer) DeletePoints(context.Context, *DeletePointsRequest) (*DeletePointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePoints not implemented")
}
func (UnimplementedPointsServer) mustEmbedUnimplementedPointsServer() {}

// UnsafePointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointsServer will
// result in compilation errors.
type UnsafePointsServer interface {
	mustEmbedUnimplementedPointsServer()
}

func RegisterPointsServer(s grpc.ServiceRegistrar, srv PointsServer) {
	s.RegisterService(&Points_ServiceDesc, srv)
}

func _Points_CreatePoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).CreatePoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_CreatePoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).CreatePoints(ctx, req.(*CreatePointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_GetUserAllPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAllPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).GetUserAllPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_GetUserAllPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).GetUserAllPoints(ctx, req.(*GetUserAllPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_UpdatePoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).UpdatePoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_UpdatePoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).UpdatePoints(ctx, req.(*UpdatePointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_UpdatePointsCompensation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePointsCompensationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).UpdatePointsCompensation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_UpdatePointsCompensation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).UpdatePointsCompensation(ctx, req.(*UpdatePointsCompensationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_DeletePoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).DeletePoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_DeletePoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).DeletePoints(ctx, req.(*DeletePointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Points_ServiceDesc is the grpc.ServiceDesc for Points service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Points_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "points.Points",
	HandlerType: (*PointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePoints",
			Handler:    _Points_CreatePoints_Handler,
		},
		{
			MethodName: "GetUserAllPoints",
			Handler:    _Points_GetUserAllPoints_Handler,
		},
		{
			MethodName: "UpdatePoints",
			Handler:    _Points_UpdatePoints_Handler,
		},
		{
			MethodName: "UpdatePointsCompensation",
			Handler:    _Points_UpdatePointsCompensation_Handler,
		},
		{
			MethodName: "DeletePoints",
			Handler:    _Points_DeletePoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "points.proto",
}
