// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: smartDoctor.proto

package smartDoctor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SmartDoctor_DoctorQuestion_FullMethodName       = "/smartDoctor.SmartDoctor/DoctorQuestion"
	SmartDoctor_DoctorQuestionList_FullMethodName   = "/smartDoctor.SmartDoctor/DoctorQuestionList"
	SmartDoctor_DoctorQuestionDelete_FullMethodName = "/smartDoctor.SmartDoctor/DoctorQuestionDelete"
)

// SmartDoctorClient is the client API for SmartDoctor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmartDoctorClient interface {
	DoctorQuestion(ctx context.Context, in *DoctorQuestionRequest, opts ...grpc.CallOption) (*DoctorQuestionResponse, error)
	DoctorQuestionList(ctx context.Context, in *DoctorQuestionListRequest, opts ...grpc.CallOption) (*DoctorQuestionListResponse, error)
	DoctorQuestionDelete(ctx context.Context, in *DoctorQuestionDeleteRequest, opts ...grpc.CallOption) (*DoctorQuestionDeleteResponse, error)
}

type smartDoctorClient struct {
	cc grpc.ClientConnInterface
}

func NewSmartDoctorClient(cc grpc.ClientConnInterface) SmartDoctorClient {
	return &smartDoctorClient{cc}
}

func (c *smartDoctorClient) DoctorQuestion(ctx context.Context, in *DoctorQuestionRequest, opts ...grpc.CallOption) (*DoctorQuestionResponse, error) {
	out := new(DoctorQuestionResponse)
	err := c.cc.Invoke(ctx, SmartDoctor_DoctorQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartDoctorClient) DoctorQuestionList(ctx context.Context, in *DoctorQuestionListRequest, opts ...grpc.CallOption) (*DoctorQuestionListResponse, error) {
	out := new(DoctorQuestionListResponse)
	err := c.cc.Invoke(ctx, SmartDoctor_DoctorQuestionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartDoctorClient) DoctorQuestionDelete(ctx context.Context, in *DoctorQuestionDeleteRequest, opts ...grpc.CallOption) (*DoctorQuestionDeleteResponse, error) {
	out := new(DoctorQuestionDeleteResponse)
	err := c.cc.Invoke(ctx, SmartDoctor_DoctorQuestionDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmartDoctorServer is the server API for SmartDoctor service.
// All implementations must embed UnimplementedSmartDoctorServer
// for forward compatibility
type SmartDoctorServer interface {
	DoctorQuestion(context.Context, *DoctorQuestionRequest) (*DoctorQuestionResponse, error)
	DoctorQuestionList(context.Context, *DoctorQuestionListRequest) (*DoctorQuestionListResponse, error)
	DoctorQuestionDelete(context.Context, *DoctorQuestionDeleteRequest) (*DoctorQuestionDeleteResponse, error)
	mustEmbedUnimplementedSmartDoctorServer()
}

// UnimplementedSmartDoctorServer must be embedded to have forward compatible implementations.
type UnimplementedSmartDoctorServer struct {
}

func (UnimplementedSmartDoctorServer) DoctorQuestion(context.Context, *DoctorQuestionRequest) (*DoctorQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorQuestion not implemented")
}
func (UnimplementedSmartDoctorServer) DoctorQuestionList(context.Context, *DoctorQuestionListRequest) (*DoctorQuestionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorQuestionList not implemented")
}
func (UnimplementedSmartDoctorServer) DoctorQuestionDelete(context.Context, *DoctorQuestionDeleteRequest) (*DoctorQuestionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorQuestionDelete not implemented")
}
func (UnimplementedSmartDoctorServer) mustEmbedUnimplementedSmartDoctorServer() {}

// UnsafeSmartDoctorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmartDoctorServer will
// result in compilation errors.
type UnsafeSmartDoctorServer interface {
	mustEmbedUnimplementedSmartDoctorServer()
}

func RegisterSmartDoctorServer(s grpc.ServiceRegistrar, srv SmartDoctorServer) {
	s.RegisterService(&SmartDoctor_ServiceDesc, srv)
}

func _SmartDoctor_DoctorQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartDoctorServer).DoctorQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartDoctor_DoctorQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartDoctorServer).DoctorQuestion(ctx, req.(*DoctorQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartDoctor_DoctorQuestionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorQuestionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartDoctorServer).DoctorQuestionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartDoctor_DoctorQuestionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartDoctorServer).DoctorQuestionList(ctx, req.(*DoctorQuestionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartDoctor_DoctorQuestionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorQuestionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartDoctorServer).DoctorQuestionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartDoctor_DoctorQuestionDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartDoctorServer).DoctorQuestionDelete(ctx, req.(*DoctorQuestionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SmartDoctor_ServiceDesc is the grpc.ServiceDesc for SmartDoctor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmartDoctor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartDoctor.SmartDoctor",
	HandlerType: (*SmartDoctorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoctorQuestion",
			Handler:    _SmartDoctor_DoctorQuestion_Handler,
		},
		{
			MethodName: "DoctorQuestionList",
			Handler:    _SmartDoctor_DoctorQuestionList_Handler,
		},
		{
			MethodName: "DoctorQuestionDelete",
			Handler:    _SmartDoctor_DoctorQuestionDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smartDoctor.proto",
}
