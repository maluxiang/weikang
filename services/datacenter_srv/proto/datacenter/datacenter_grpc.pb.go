// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: datacenter.proto

package datacenter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Datacenter_Ping_FullMethodName                   = "/datacenter.Datacenter/Ping"
	Datacenter_ReportHealthData_FullMethodName       = "/datacenter.Datacenter/ReportHealthData"
	Datacenter_ReportHealthDataList_FullMethodName   = "/datacenter.Datacenter/ReportHealthDataList"
	Datacenter_ReportHealthDataDelete_FullMethodName = "/datacenter.Datacenter/ReportHealthDataDelete"
)

// DatacenterClient is the client API for Datacenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatacenterClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 健康数据上报
	ReportHealthData(ctx context.Context, in *ReportHealthDataRequest, opts ...grpc.CallOption) (*ReportHealthDataResponse, error)
	// 获取健康数据列表
	ReportHealthDataList(ctx context.Context, in *ReportHealthDataListRequest, opts ...grpc.CallOption) (*ReportHealthDataListResponse, error)
	// 健康数据删除
	ReportHealthDataDelete(ctx context.Context, in *ReportHealthDataDeleteRequest, opts ...grpc.CallOption) (*ReportHealthDataDeleteResponse, error)
}

type datacenterClient struct {
	cc grpc.ClientConnInterface
}

func NewDatacenterClient(cc grpc.ClientConnInterface) DatacenterClient {
	return &datacenterClient{cc}
}

func (c *datacenterClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Datacenter_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datacenterClient) ReportHealthData(ctx context.Context, in *ReportHealthDataRequest, opts ...grpc.CallOption) (*ReportHealthDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportHealthDataResponse)
	err := c.cc.Invoke(ctx, Datacenter_ReportHealthData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datacenterClient) ReportHealthDataList(ctx context.Context, in *ReportHealthDataListRequest, opts ...grpc.CallOption) (*ReportHealthDataListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportHealthDataListResponse)
	err := c.cc.Invoke(ctx, Datacenter_ReportHealthDataList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datacenterClient) ReportHealthDataDelete(ctx context.Context, in *ReportHealthDataDeleteRequest, opts ...grpc.CallOption) (*ReportHealthDataDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportHealthDataDeleteResponse)
	err := c.cc.Invoke(ctx, Datacenter_ReportHealthDataDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatacenterServer is the server API for Datacenter service.
// All implementations must embed UnimplementedDatacenterServer
// for forward compatibility
type DatacenterServer interface {
	Ping(context.Context, *Request) (*Response, error)
	// 健康数据上报
	ReportHealthData(context.Context, *ReportHealthDataRequest) (*ReportHealthDataResponse, error)
	// 获取健康数据列表
	ReportHealthDataList(context.Context, *ReportHealthDataListRequest) (*ReportHealthDataListResponse, error)
	// 健康数据删除
	ReportHealthDataDelete(context.Context, *ReportHealthDataDeleteRequest) (*ReportHealthDataDeleteResponse, error)
	mustEmbedUnimplementedDatacenterServer()
}

// UnimplementedDatacenterServer must be embedded to have forward compatible implementations.
type UnimplementedDatacenterServer struct {
}

func (UnimplementedDatacenterServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDatacenterServer) ReportHealthData(context.Context, *ReportHealthDataRequest) (*ReportHealthDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHealthData not implemented")
}
func (UnimplementedDatacenterServer) ReportHealthDataList(context.Context, *ReportHealthDataListRequest) (*ReportHealthDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHealthDataList not implemented")
}
func (UnimplementedDatacenterServer) ReportHealthDataDelete(context.Context, *ReportHealthDataDeleteRequest) (*ReportHealthDataDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHealthDataDelete not implemented")
}
func (UnimplementedDatacenterServer) mustEmbedUnimplementedDatacenterServer() {}

// UnsafeDatacenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatacenterServer will
// result in compilation errors.
type UnsafeDatacenterServer interface {
	mustEmbedUnimplementedDatacenterServer()
}

func RegisterDatacenterServer(s grpc.ServiceRegistrar, srv DatacenterServer) {
	s.RegisterService(&Datacenter_ServiceDesc, srv)
}

func _Datacenter_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datacenter_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datacenter_ReportHealthData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportHealthDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServer).ReportHealthData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datacenter_ReportHealthData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServer).ReportHealthData(ctx, req.(*ReportHealthDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datacenter_ReportHealthDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportHealthDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServer).ReportHealthDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datacenter_ReportHealthDataList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServer).ReportHealthDataList(ctx, req.(*ReportHealthDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datacenter_ReportHealthDataDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportHealthDataDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServer).ReportHealthDataDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datacenter_ReportHealthDataDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServer).ReportHealthDataDelete(ctx, req.(*ReportHealthDataDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Datacenter_ServiceDesc is the grpc.ServiceDesc for Datacenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Datacenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datacenter.Datacenter",
	HandlerType: (*DatacenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Datacenter_Ping_Handler,
		},
		{
			MethodName: "ReportHealthData",
			Handler:    _Datacenter_ReportHealthData_Handler,
		},
		{
			MethodName: "ReportHealthDataList",
			Handler:    _Datacenter_ReportHealthDataList_Handler,
		},
		{
			MethodName: "ReportHealthDataDelete",
			Handler:    _Datacenter_ReportHealthDataDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datacenter.proto",
}
